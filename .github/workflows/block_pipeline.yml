name: block-pipline
on:
  workflow_dispatch:
    inputs:
      target_enviornment:
        description: "TEMP desired enviornment project will be promoted to."
        type: string
        required: true
      feature_name:
        description: "Directory name where files to be checked "
        type: string
        required: true
jobs:
  check-enviornment:
    runs-on: ubuntu-latest
    permissions:
        contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: DEBUG find script
        run: find ~ -name "verify_annotation.sh"
        #Find annotation

      - name: Download jq library
        run: sudo apt-get install jq

      #TODO: TAKE OUT SPECIFYING DIRECTORY
      - name: TEMP NAME
        run: cd '${{ inputs.feature_name }}/'; .github/workflows/verify_annotation.sh ${{ inputs.target_enviornment }}
      #  run: |
      #    cd '${{ inputs.feature_name }}/'; for PIPELINE in *.json; do
      #        ANNO_PRESENT="$(jq '.properties | has("annotations")' "$PIPELINE")"; if [ $ANNO_PRESENT == "true" ]; then
      #            ENV_PRESENT="$(jq '.properties.annotations | contains(["${{ inputs.target_enviornment }}"])' "$PIPELINE")"; if [ $ENV_PRESENT == "true" ]; then
      #                echo "$PIPELINE is approved for ${{ inputs.target_enviornment }}"
      #            else
      #                echo "$PIPELINE is NOT approved for ${{ inputs.target_enviornment }}. It will be removed."; echo "TEMP $PIPELINE"
      #            fi
      #        else
      #            echo "$PIPELINE is NOT approved for ${{ inputs.target_enviornment }}, and has no annotations. It will be removed."; echo "TEMP $PIPELINE"
      #        fi
      #    done
      - name: Set user
        run: git config --global user.name "${{ github.actor }}"
      - name: Set email
        run: git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
      #- name: Stage changes
      #  run: git add --all
      #- name: Commit changes
      #  run: git commit -m "Removed any unallowed pipelines."
      #- name: Push origin
      #  run: git push -u origin #INSERT NAME OF CURRENT BRANCH